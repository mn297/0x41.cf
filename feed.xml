<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://0x41.cf/feed.xml" rel="self" type="application/atom+xml" /><link href="https://0x41.cf/" rel="alternate" type="text/html" /><updated>2021-05-26T12:46:26+00:00</updated><id>https://0x41.cf/feed.xml</id><title type="html">0x41.cf</title><subtitle>InfoSec, Reverse Engineering, and more (soon&amp;trade;)</subtitle><author><name>Sami ALAOUI KENDIL</name></author><entry><title type="html">Google Assistant YouTube command for smart TVs</title><link href="https://0x41.cf/automation/2021/03/02/google-assistant-youtube-smart-tvs.html" rel="alternate" type="text/html" title="Google Assistant YouTube command for smart TVs" /><published>2021-03-02T00:00:00+00:00</published><updated>2021-03-02T00:00:00+00:00</updated><id>https://0x41.cf/automation/2021/03/02/google-assistant-youtube-smart-tvs</id><content type="html" xml:base="https://0x41.cf/automation/2021/03/02/google-assistant-youtube-smart-tvs.html">&lt;h3 id=&quot;context&quot;&gt;Context&lt;/h3&gt;

&lt;p&gt;After I’ve noticed my 2019 Samsung TV had support for Google Assistant commands for basic controls such as power, volume, channel, input source, etc., I thought it would be cool to also be able to cast media content using my voice, but I then realized that the only officially supported TVs were labeled ‘Chromecast-enabled’, and that people without those generally end up buying the Chromecast TV stick, for the ‘full compatibility’, which sounds like a waste when you already own a ‘smart’ TV.&lt;/p&gt;

&lt;p&gt;As YouTube takes up the largest part of my ‘media consumption’, one day, &lt;del&gt;and after procrastinating for months,&lt;/del&gt; I went ahead and checked out the inner-workings of the existing casting functionnality, by casting YouTube videos from the Android app to the TV, to try to figure out a way to automate that process, to then link it to the Google Assistant.&lt;/p&gt;

&lt;h3 id=&quot;dial-protocol&quot;&gt;DIAL protocol&lt;/h3&gt;

&lt;p&gt;By doing a quick capture of the network traffic between the phone and the TV - by using the Intercepter-NG app (requires root), I’ve already noticed a very simple and easy-to-spot HTTP endpoint that was being hit during the cast connection:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://tizen:8080/ws/apps/YouTube&lt;/code&gt; (‘tizen’ being the TV’s LAN hostname)&lt;/p&gt;

&lt;p&gt;A quick search online revealed that this endpoint is part of a protocol called DIAL, for Discovery and Launch, which is used to initiate applications on “1st screen” devices, such as TVs, via small factor (“2nd screen”) devices, such as phones and tablets. (&lt;a href=&quot;https://en.wikipedia.org/wiki/Discovery_and_Launch&quot;&gt;More on Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;It turns out that a simple empty POST request to the previously mentionned endpoint would launch the application on the target TV, and a GET would return various metadata around the application, in XML format, including its status (running/stopped), and other application-specific information:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;service&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;urn:dial-multiscreen-org:schemas:dial&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:atom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2005/Atom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dialVer=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2.1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;YouTube&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;options&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allowStop=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;state&amp;gt;&lt;/span&gt;running&lt;span class=&quot;nt&quot;&gt;&amp;lt;/state&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.493&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;run&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;run&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;additionalData&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;testYWRkaXR&amp;gt;&lt;/span&gt;c0ef1ca&lt;span class=&quot;nt&quot;&gt;&amp;lt;/testYWRkaXR&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;screenId&amp;gt;&lt;/span&gt;[REDACTED]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/screenId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;theme&amp;gt;&lt;/span&gt;cl&lt;span class=&quot;nt&quot;&gt;&amp;lt;/theme&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;deviceId&amp;gt;&lt;/span&gt;[REDACTED]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/deviceId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;loungeToken&amp;gt;&lt;/span&gt;AGdO5p9wG5CgVGkvneeZ4MSaEJMnJrailH5e4YBwEa4zDZl9C-J5Hju0dxT-PzOJsNQcojxt5ih1K5cY72mPFR-IJUVBC-KU-WaLBriZMnc9KFv1DBLXlhY&lt;span class=&quot;nt&quot;&gt;&amp;lt;/loungeToken&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;loungeTokenRefreshIntervalMs&amp;gt;&lt;/span&gt;1500000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/loungeTokenRefreshIntervalMs&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/additionalData&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great, we now have an easy way of launching the app on the target TV so that it’s ready to receive casted content.&lt;/p&gt;

&lt;p&gt;After doing more research, it seems there’s also an ‘easy’ way of playing actual videos using this same endpoint, by simply adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; parameter on the body of the POST request, which would be the YouTube video ID.&lt;/p&gt;

&lt;p&gt;However though, it seems that this method was recently (late 2020) rendered useless, as it now requires manual confirmation on the TV each time a video is requested.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/yt-shady-cast-prompt.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Time to dig deeper.&lt;/p&gt;

&lt;h3 id=&quot;youtube-cast-functionnality&quot;&gt;YouTube cast functionnality&lt;/h3&gt;

&lt;p&gt;In order to proceed with further network traffic inspection, it was needed to achieve HTTPS interception, which would require bypassing SSL-pinning on the Android YouTube app, in order to be able to decrypt its traffic.&lt;/p&gt;

&lt;p&gt;Luckily though, it turns out that the Google Chrome browser also supports the casting functionnality on YouTube - so I’ve simply fired up &lt;a href=&quot;https://www.telerik.com/download/fiddler&quot;&gt;Fiddler&lt;/a&gt; and started watching the web requests.&lt;/p&gt;

&lt;p&gt;When a compatible TV is discovered, a casting icon pops up on the YouTube player control bar, like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/yt-cast-icon.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking the icon and choosing the cast device, the YouTube player starts acting as a remote.&lt;/p&gt;

&lt;p&gt;Behind the scenes, a private YouTube API called ‘Lounge’ is used, in order to do the pairing and the remote control functionnality for YouTube Leanback (big screen) devices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/yt-lounge-api-capture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By analysing these requests, I’ve noticed that the API was fairly complicated, with a mix of body and URL parameters, comprising tokens, IDs, as well as some weird changing alphanumeric values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/yt-lounge-api-params.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The responses were also seemingly in a custom JSON-based format.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;174&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;onStateChange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;currentTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;50&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;duration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;318.321&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cpn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7s_Qx1i3xE4fXNVX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;loadedTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;50&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;seekableStartTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;seekableEndTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;318.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, I was able to find some very useful code on GitHub, which saved me the hassle of reverse engineering the API, which quite frankly, I might’ve gave up doing. 👀&lt;/p&gt;

&lt;h3 id=&quot;youtube-remote-by-mutantmonkey&quot;&gt;youtube-remote by @mutantmonkey&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mutantmonkey/youtube-remote&quot;&gt;youtube-remote&lt;/a&gt; allows us to play/queue a video, and pause/resume the playback, using the YouTube Lounge API.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;usage: remote.py [-h] (--play PLAY | --queue [QUEUE ...] | --pause | --unpause)

Command-line YouTube Leanback remote

optional arguments:
  -h, --help           show this help message and exit
  --play PLAY          Play a video immediately
  --queue [QUEUE ...]  Add a video to the queue
  --pause              Pause the current video
  --unpause            Unpause the current video
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first phase is the pairing phase.&lt;/p&gt;

&lt;p&gt;Upon running the script, you are instructed to provide a pairing code - which is seemingly the method used to pair with ‘old-school’ leanback devices, that aren’t necessarily on the same network and/or don’t support casting protocols like DIAL.&lt;/p&gt;

&lt;p&gt;The pairing code is then used to retreive the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loungeToken&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/api/lounge/pairing/get_screen&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;We can skip this part, as in our case, the TV seems to always allocate its own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loungeToken&lt;/code&gt;, as seen on the &lt;a href=&quot;#dial-protocol&quot;&gt;‘DIAL endpoint’ response&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After commenting out the pairing code part, and manually assigning the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loungeToken&lt;/code&gt; of the TV, the script worked!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/yt-remote-demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sweet! We now have a decent way of playing YouTube videos on the TV.&lt;/p&gt;

&lt;h3 id=&quot;automation&quot;&gt;Automation&lt;/h3&gt;

&lt;p&gt;Now that we’ve figured out the main part, it’s now time to find a method of automating the whole process.&lt;/p&gt;

&lt;p&gt;First off, &lt;a href=&quot;https://ifttt.com/&quot;&gt;IFTTT&lt;/a&gt; allows us to have &lt;a href=&quot;https://support.google.com/googlenest/answer/7194656&quot;&gt;custom Google Assistant commands&lt;/a&gt;, so we can use that as a starting point.&lt;/p&gt;

&lt;p&gt;IFTTT has a &lt;a href=&quot;https://ifttt.com/maker_webhooks&quot;&gt;webhook plugin&lt;/a&gt;, which would allow us to receive actions following a Google Assistant command, via HTTP.&lt;/p&gt;

&lt;p&gt;But in order for us to receive these commands locally, we would have to expose a local webserver to the internet, which means that we have to use either a reverse proxy service such as &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt; or &lt;a href=&quot;https://localtunnel.me/&quot;&gt;localtunnel&lt;/a&gt;, or do port forwarding on the router, and configure a dynamic DNS (I went with the former option, for reference).&lt;/p&gt;

&lt;p&gt;So, In short, here’s the complete execution flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;“Hey Google, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchQuery&lt;/code&gt; on YouTube.”&lt;/li&gt;
  &lt;li&gt;Google Assistant executes the IFTTT command.&lt;/li&gt;
  &lt;li&gt;Which calls IFTTT’s Maker Webhooks on a public webhook.&lt;/li&gt;
  &lt;li&gt;Which forwards to our local webserver.&lt;/li&gt;
  &lt;li&gt;Which would execute the following sequence:
    &lt;ul&gt;
      &lt;li&gt;Do a YouTube video search by scraping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;youtube.com/results?search_query={searchQuery}&lt;/code&gt;, in order to find/parse the video ID.&lt;/li&gt;
      &lt;li&gt;Launch the YouTube app on the TV (POST :8080/ws/apps/YouTube).&lt;/li&gt;
      &lt;li&gt;Wait for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loungeToken&lt;/code&gt; to be available (GET).&lt;/li&gt;
      &lt;li&gt;Use the Lounge API to play the video on the TV (youtube-remote on GitHub).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;extras&quot;&gt;Extras&lt;/h3&gt;

&lt;h4 id=&quot;1-multiple-search-results&quot;&gt;1. Multiple search results&lt;/h4&gt;

&lt;p&gt;As my TV already supported Google Assistant commands such as next and previous, I thought about queuing a dozen of YouTube videos that come up on the search, instead of just one, so I can go through the search results, in case the video I want is not the first one to show up.&lt;/p&gt;

&lt;p&gt;After I’ve noticed that queuing each video would show an annoying notification on the TV, I looked for better way to do the job.&lt;/p&gt;

&lt;p&gt;Luckily, after some analysis of YouTube JS code, and some trial and error, I was able to figure out how to use the Lounge API command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setPlaylist&lt;/code&gt;, which takes 2 arguments, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;videoId&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;videoIds&lt;/code&gt; - the first one is the initial video to play, while the second one is a comma-separated list of the rest of the videos to be queued.&lt;/p&gt;

&lt;p&gt;Cool, no more pesky notifications, and a single command can do it all now.&lt;/p&gt;

&lt;h4 id=&quot;2-wake-on-lan&quot;&gt;2. Wake-on-LAN&lt;/h4&gt;

&lt;p&gt;I’ve also implemented Wake-on-LAN, so that the TV would turn on in case it was off.&lt;/p&gt;

&lt;p&gt;This is especially useful since, for some reason, there’s a &lt;a href=&quot;https://community.smartthings.com/t/samsung-tv-cant-turn-on/114960&quot;&gt;known issue&lt;/a&gt;, at least on some select models, where if the TV is connected via Ethernet instead of Wi-Fi, it loses connection to &lt;a href=&quot;https://www.smartthings.com/&quot;&gt;SmartThings&lt;/a&gt; soon after it’s turned off - which means you can’t turn it on from the cloud/Google Assistant.&lt;/p&gt;

&lt;h4 id=&quot;3-youtube-player-ui-visibility&quot;&gt;3. YouTube player UI visibility&lt;/h4&gt;

&lt;p&gt;Lastly, a small UX improvement: I send a pause + play command (you can send multiple commands on a single request) after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setPlaylist&lt;/code&gt; command, to force the YouTube player UI to show up initially (so that one’s able to see the video title), as it doesn’t do so by default when casting.&lt;/p&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;

&lt;p style=&quot;position: relative; padding: 30px 0px 57% 0px; height: 0; overflow: hidden;&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/2viK_LeoT4M&quot; width=&quot;100%&quot; height=&quot;100%&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot;display: block; margin: 0px auto; position: absolute; top: 0; left: 0;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;I’ve &lt;a href=&quot;https://github.com/thedroidgeek/youtube-cast-automation-api&quot;&gt;shared my code on GitHub&lt;/a&gt; - it’s a python script with a micro API that needs to be exposed to the internet, to then be linked to the Google Assistant through IFTTT, as previously explained - the details on how to do so as well as the API documentation can be found on the README of the repository.&lt;/p&gt;

&lt;h3 id=&quot;potential-future-plans&quot;&gt;Potential future plans&lt;/h3&gt;

&lt;p&gt;Since I’m currently running my little server on a Raspberry Pi anyway, I might soon check out &lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;Home Assistant&lt;/a&gt;, so I can perhaps port my code to it, and potentially get into more home automation stuff - so I &lt;em&gt;might&lt;/em&gt; diversify my future posts with more of such content as well, pending positive feedback.&lt;/p&gt;

&lt;p&gt;See you in 2 years! /s&lt;/p&gt;

&lt;p&gt;“Hey Google, publish blog post.” 😂👌💯🌈&lt;/p&gt;</content><author><name>Sami ALAOUI KENDIL</name></author><category term="Automation" /><summary type="html">Context After I’ve noticed my 2019 Samsung TV had support for Google Assistant commands for basic controls such as power, volume, channel, input source, etc., I thought it would be cool to also be able to cast media content using my voice, but I then realized that the only officially supported TVs were labeled ‘Chromecast-enabled’, and that people without those generally end up buying the Chromecast TV stick, for the ‘full compatibility’, which sounds like a waste when you already own a ‘smart’ TV. As YouTube takes up the largest part of my ‘media consumption’, one day, and after procrastinating for months, I went ahead and checked out the inner-workings of the existing casting functionnality, by casting YouTube videos from the Android app to the TV, to try to figure out a way to automate that process, to then link it to the Google Assistant. DIAL protocol By doing a quick capture of the network traffic between the phone and the TV - by using the Intercepter-NG app (requires root), I’ve already noticed a very simple and easy-to-spot HTTP endpoint that was being hit during the cast connection: http://tizen:8080/ws/apps/YouTube (‘tizen’ being the TV’s LAN hostname) A quick search online revealed that this endpoint is part of a protocol called DIAL, for Discovery and Launch, which is used to initiate applications on “1st screen” devices, such as TVs, via small factor (“2nd screen”) devices, such as phones and tablets. (More on Wikipedia) It turns out that a simple empty POST request to the previously mentionned endpoint would launch the application on the target TV, and a GET would return various metadata around the application, in XML format, including its status (running/stopped), and other application-specific information: &amp;lt;service xmlns=&quot;urn:dial-multiscreen-org:schemas:dial&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot; dialVer=&quot;2.1&quot;&amp;gt; &amp;lt;name&amp;gt;YouTube&amp;lt;/name&amp;gt; &amp;lt;options allowStop=&quot;true&quot;/&amp;gt; &amp;lt;state&amp;gt;running&amp;lt;/state&amp;gt; &amp;lt;version&amp;gt;2.1.493&amp;lt;/version&amp;gt; &amp;lt;link rel=&quot;run&quot; href=&quot;run&quot;/&amp;gt; &amp;lt;additionalData&amp;gt; &amp;lt;testYWRkaXR&amp;gt;c0ef1ca&amp;lt;/testYWRkaXR&amp;gt; &amp;lt;screenId&amp;gt;[REDACTED]&amp;lt;/screenId&amp;gt; &amp;lt;theme&amp;gt;cl&amp;lt;/theme&amp;gt; &amp;lt;deviceId&amp;gt;[REDACTED]&amp;lt;/deviceId&amp;gt; &amp;lt;loungeToken&amp;gt;AGdO5p9wG5CgVGkvneeZ4MSaEJMnJrailH5e4YBwEa4zDZl9C-J5Hju0dxT-PzOJsNQcojxt5ih1K5cY72mPFR-IJUVBC-KU-WaLBriZMnc9KFv1DBLXlhY&amp;lt;/loungeToken&amp;gt; &amp;lt;loungeTokenRefreshIntervalMs&amp;gt;1500000&amp;lt;/loungeTokenRefreshIntervalMs&amp;gt; &amp;lt;/additionalData&amp;gt; &amp;lt;/service&amp;gt; Great, we now have an easy way of launching the app on the target TV so that it’s ready to receive casted content. After doing more research, it seems there’s also an ‘easy’ way of playing actual videos using this same endpoint, by simply adding a v parameter on the body of the POST request, which would be the YouTube video ID. However though, it seems that this method was recently (late 2020) rendered useless, as it now requires manual confirmation on the TV each time a video is requested. Time to dig deeper. YouTube cast functionnality In order to proceed with further network traffic inspection, it was needed to achieve HTTPS interception, which would require bypassing SSL-pinning on the Android YouTube app, in order to be able to decrypt its traffic. Luckily though, it turns out that the Google Chrome browser also supports the casting functionnality on YouTube - so I’ve simply fired up Fiddler and started watching the web requests. When a compatible TV is discovered, a casting icon pops up on the YouTube player control bar, like so: After clicking the icon and choosing the cast device, the YouTube player starts acting as a remote. Behind the scenes, a private YouTube API called ‘Lounge’ is used, in order to do the pairing and the remote control functionnality for YouTube Leanback (big screen) devices. By analysing these requests, I’ve noticed that the API was fairly complicated, with a mix of body and URL parameters, comprising tokens, IDs, as well as some weird changing alphanumeric values. The responses were also seemingly in a custom JSON-based format. B2 174 [[105,[&quot;onStateChange&quot;,{&quot;currentTime&quot;:&quot;50&quot;,&quot;duration&quot;:&quot;318.321&quot;,&quot;cpn&quot;:&quot;7s_Qx1i3xE4fXNVX&quot;,&quot;loadedTime&quot;:&quot;50&quot;,&quot;state&quot;:&quot;3&quot;,&quot;seekableStartTime&quot;:&quot;0&quot;,&quot;seekableEndTime&quot;:&quot;318.3&quot;}]] ] 0 However, I was able to find some very useful code on GitHub, which saved me the hassle of reverse engineering the API, which quite frankly, I might’ve gave up doing. 👀 youtube-remote by @mutantmonkey youtube-remote allows us to play/queue a video, and pause/resume the playback, using the YouTube Lounge API. usage: remote.py [-h] (--play PLAY | --queue [QUEUE ...] | --pause | --unpause) Command-line YouTube Leanback remote optional arguments: -h, --help show this help message and exit --play PLAY Play a video immediately --queue [QUEUE ...] Add a video to the queue --pause Pause the current video --unpause Unpause the current video The first phase is the pairing phase. Upon running the script, you are instructed to provide a pairing code - which is seemingly the method used to pair with ‘old-school’ leanback devices, that aren’t necessarily on the same network and/or don’t support casting protocols like DIAL. The pairing code is then used to retreive the loungeToken using the /api/lounge/pairing/get_screen endpoint. We can skip this part, as in our case, the TV seems to always allocate its own loungeToken, as seen on the ‘DIAL endpoint’ response. After commenting out the pairing code part, and manually assigning the loungeToken of the TV, the script worked! Sweet! We now have a decent way of playing YouTube videos on the TV. Automation Now that we’ve figured out the main part, it’s now time to find a method of automating the whole process. First off, IFTTT allows us to have custom Google Assistant commands, so we can use that as a starting point. IFTTT has a webhook plugin, which would allow us to receive actions following a Google Assistant command, via HTTP. But in order for us to receive these commands locally, we would have to expose a local webserver to the internet, which means that we have to use either a reverse proxy service such as ngrok or localtunnel, or do port forwarding on the router, and configure a dynamic DNS (I went with the former option, for reference). So, In short, here’s the complete execution flow: “Hey Google, searchQuery on YouTube.” Google Assistant executes the IFTTT command. Which calls IFTTT’s Maker Webhooks on a public webhook. Which forwards to our local webserver. Which would execute the following sequence: Do a YouTube video search by scraping youtube.com/results?search_query={searchQuery}, in order to find/parse the video ID. Launch the YouTube app on the TV (POST :8080/ws/apps/YouTube). Wait for the loungeToken to be available (GET). Use the Lounge API to play the video on the TV (youtube-remote on GitHub). Extras 1. Multiple search results As my TV already supported Google Assistant commands such as next and previous, I thought about queuing a dozen of YouTube videos that come up on the search, instead of just one, so I can go through the search results, in case the video I want is not the first one to show up. After I’ve noticed that queuing each video would show an annoying notification on the TV, I looked for better way to do the job. Luckily, after some analysis of YouTube JS code, and some trial and error, I was able to figure out how to use the Lounge API command setPlaylist, which takes 2 arguments, videoId and videoIds - the first one is the initial video to play, while the second one is a comma-separated list of the rest of the videos to be queued. Cool, no more pesky notifications, and a single command can do it all now. 2. Wake-on-LAN I’ve also implemented Wake-on-LAN, so that the TV would turn on in case it was off. This is especially useful since, for some reason, there’s a known issue, at least on some select models, where if the TV is connected via Ethernet instead of Wi-Fi, it loses connection to SmartThings soon after it’s turned off - which means you can’t turn it on from the cloud/Google Assistant. 3. YouTube player UI visibility Lastly, a small UX improvement: I send a pause + play command (you can send multiple commands on a single request) after the setPlaylist command, to force the YouTube player UI to show up initially (so that one’s able to see the video title), as it doesn’t do so by default when casting. Demo Code I’ve shared my code on GitHub - it’s a python script with a micro API that needs to be exposed to the internet, to then be linked to the Google Assistant through IFTTT, as previously explained - the details on how to do so as well as the API documentation can be found on the README of the repository. Potential future plans Since I’m currently running my little server on a Raspberry Pi anyway, I might soon check out Home Assistant, so I can perhaps port my code to it, and potentially get into more home automation stuff - so I might diversify my future posts with more of such content as well, pending positive feedback. See you in 2 years! /s “Hey Google, publish blog post.” 😂👌💯🌈</summary></entry><entry><title type="html">Unlocking IAM’s Nokia G-240W-A router (Part 1)</title><link href="https://0x41.cf/reversing/2019/10/08/unlocking-nokia-g240wa.html" rel="alternate" type="text/html" title="Unlocking IAM’s Nokia G-240W-A router (Part 1)" /><published>2019-10-08T00:00:00+00:00</published><updated>2019-10-08T00:00:00+00:00</updated><id>https://0x41.cf/reversing/2019/10/08/unlocking-nokia-g240wa</id><content type="html" xml:base="https://0x41.cf/reversing/2019/10/08/unlocking-nokia-g240wa.html">&lt;h3 id=&quot;context&quot;&gt;Context&lt;/h3&gt;

&lt;p&gt;As we recently upgraded our home internet to try out Maroc Telecom’s 100mbps fiber offer, I’ve noticed that the Nokia router they installed had horrible Wi-Fi speed - the max I could to get standing next to it was around 60mbps down, while in the opposite room, the speed was always under 10mbps.&lt;/p&gt;

&lt;p&gt;What’s interesting is the fact that it had decent range - I get full bars most of the time, and my Wi-Fi adapter reports a 300mbps data rate.&lt;/p&gt;

&lt;p&gt;This got me intrigued, so I tried to take a look at what’s running inside this thing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/nokia-g-240w-a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;first-look&quot;&gt;First look&lt;/h3&gt;

&lt;p&gt;Doing a little online research, you will find out that the firmware on this router had quite a &lt;a href=&quot;https://medium.com/tenable-techblog/gpon-home-gateway-rce-threatens-tens-of-thousands-users-c4a17fd25b97&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;bad&lt;/a&gt; &lt;a href=&quot;https://www.websec.ca/publication/Blog/backdoors-in-Zhone-GPON-2520-and-Alcatel-Lucent-I240Q&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;history&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s various blog posts showing that routers running on similar firmware were found to be vulnerable to unauthenticated RCE vulnerabilities, and had hardcoded Telnet backdoor accounts.&lt;/p&gt;

&lt;p&gt;The first thing I did, of course, is log into the web administration portal - there’s a sticker in the back of the router with the credentials, which seem device specific, which is good… Or so I thought - as it turns out there’s a known ‘superuser’ account for the web panel, which has a default password: AdminGPON / ALC#FGU&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/nokia-ont-back.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After fiddling with the web interface, trying to force the WiFi to use 802.11n and 40MHz bandwidth, I’ve noticed no difference. It was time to take a deeper dive.&lt;/p&gt;

&lt;p&gt;According to someone at &lt;a href=&quot;https://lafibre.info/cryptographie/probleme-dacces-en-ligne-de-commande-a-mon-ont/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;lafibre.info&lt;/a&gt; forum, Telnet access to this router was possible via the ONTUSER / SUGAR2A041 ‘backdoor’ account, before an update was deployed sometime in June 2018.&lt;/p&gt;

&lt;p&gt;I’ve tried the web account credentials as well as any backdoor credentials I was able to find, to no avail. The fact that Telnet access locks for 5 minutes every 3 failed attempts didn’t help as well.&lt;/p&gt;

&lt;p&gt;That’s when I’ve decided to take a look at the configuration backup and restore functionnality.&lt;/p&gt;

&lt;h3 id=&quot;analysing-the-backup-file&quot;&gt;Analysing the backup file&lt;/h3&gt;

&lt;p&gt;As the ‘AdminGPON’ user, you’re able to import and export the router configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/nokia-ont-backup-restore.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the exported config.cfg file wasn’t plain-text, I’ve tried looking for magic values, and binwalk was able to find something right away:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ binwalk config.cfg

DECIMAL     HEXADECIMAL   DESCRIPTION
--------------------------------------------------------------------
20          0x14          Zlib compressed data, default compression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Being the lazy guy that I am, I’ve opened the file in a hex editor, stripped out the first 20 bytes, then pasted the hex dump in &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CyberChef&lt;/a&gt;, and a huge xml file showed up. Bingo!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/cyberchef-zlib.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Exploring the xml a bit, I was able to spot the Telnet credentials (or so I thought):&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;TelnetEnable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boolean&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/TelnetEnable&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;TelnetUserName&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ml=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;256&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/TelnetUserName&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;TelnetPassword&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ml=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;256&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OYdLWUVDdKQTPaCIeTqniA==&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ealgo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/TelnetPassword&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alrighty, now how do I crack/decrypt this admin password?&lt;/p&gt;

&lt;p&gt;Since this was 128-bit base64 encoded data, I tried MD5’ing known passwords, then I tried every other known hashing algorithm, but none of them gave me anything - so it has to be either salted or encryption.&lt;/p&gt;

&lt;p&gt;Exploring a little further, I’ve found another Telnet credential thingy:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;TelnetSshAccount.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;n=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TelnetSshAccount&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;staticObject&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Enable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boolean&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Enable&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;UserName&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ml=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;64&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/UserName&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Password&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ml=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;64&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ealgo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Password&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TelnetSshAccount.&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But it’s unused… Damn.&lt;/p&gt;

&lt;p&gt;Now that modifying the configuration file seemed more necessary, I tried to take a second look at the exported config.cfg.&lt;/p&gt;

&lt;h3 id=&quot;modifying-the-backup-file&quot;&gt;Modifying the backup file&lt;/h3&gt;

&lt;p&gt;I kept exporting backup files while changing the router settings to regenerate different files for me to look at.&lt;/p&gt;

&lt;p&gt;After a few comparisons with the not so naked eye (I wear glasses), I was able to tell that a single 32-bit value in the header was always changing radically, so this must be a checksum of sorts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/cfg-header-comparison.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now before guessing what’s being checksumed and how, I first need to know where the zlib data ends and if there’s something else after it.&lt;/p&gt;

&lt;p&gt;So I tried recreating the compressed chunk, which was pretty trivial, again thanks to CyberChef.&lt;/p&gt;

&lt;p&gt;It turns out there’s about 300 bytes after it that are unknown, but still, CRC32 on the deflated data gave the exact value at offset 8, which was in big endian. Yay!&lt;/p&gt;

&lt;p&gt;Now the null bytes made more sense, and it was clear to me that the other values next to the checksum must be positive integers.&lt;/p&gt;

&lt;p&gt;Soon after, I was able to figure out that the first one (+4) was the length of the deflated data, while the second one (+C) was the size of the xml file.&lt;/p&gt;

&lt;p&gt;Since in all the config.cfg files that I’ve exported, the rest of the bytes were static, this seemed enough for me to generate my own backup file, and as expected, uploading my crafted config.cfg worked!&lt;/p&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;https://gist.github.com/thedroidgeek/80c379aa43b71015d71da130f85a435a&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;simple python script&lt;/a&gt; I’ve made for this purpose, for those interested.&lt;/p&gt;

&lt;h3 id=&quot;unlocking-telnet-and-ssh-access&quot;&gt;Unlocking Telnet and SSH access&lt;/h3&gt;

&lt;p&gt;So I took the password that I’ve set for the the ‘AdminGPON’ web account from:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;WebAccount.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;n=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WebAccount&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;staticObject&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Enable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boolean&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Enable&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Priority&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unsignedInt&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Priority&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;UserName&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ml=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;64&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AdminGPON&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/UserName&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Password&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ml=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;64&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[REDACTED]&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ealgo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Password&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PresetPassword&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ml=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;64&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;R&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xEKUBYh1yT50dQFNwAr/5A==&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ealgo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/PresetPassword&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/WebAccount.&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And used it for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TelnetPassword&lt;/code&gt; config node, but logging in as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; still didn’t work.&lt;/p&gt;

&lt;p&gt;Since I can now generate these password hashes (or whatever they are) also, I tried changing my ‘AdminGPON’ password and comparing the resulting value with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TelnetPassword&lt;/code&gt; one (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OYdLWUVDdKQTPaCIeTqniA==&lt;/code&gt;), and after a couple of tries, I’ve realized that the password was simply: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since we all know that admin:admin is the first login combo that I, and everyone else, use, when trying to login on any panel that’s not ours, it seems like they now ignore these credentials.&lt;/p&gt;

&lt;p&gt;But don’t worry, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TelnetSshAccount&lt;/code&gt; comes to the rescue:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;TelnetSshAccount.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;n=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TelnetSshAccount&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;staticObject&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Enable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boolean&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Enable&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;UserName&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ml=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;64&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hexdd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/UserName&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Password&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ml=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;64&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rw=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;t=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[REDACTED]&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ealgo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Password&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TelnetSshAccount.&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve set the ‘Enable’ flag to true, chose a username, and copied my password, and lo and behold, after a reboot, we have root!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/root-nokia-ont.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Stay tuned for more. :)&lt;/p&gt;</content><author><name>Sami ALAOUI KENDIL</name></author><category term="Reversing" /><summary type="html">Context As we recently upgraded our home internet to try out Maroc Telecom’s 100mbps fiber offer, I’ve noticed that the Nokia router they installed had horrible Wi-Fi speed - the max I could to get standing next to it was around 60mbps down, while in the opposite room, the speed was always under 10mbps. What’s interesting is the fact that it had decent range - I get full bars most of the time, and my Wi-Fi adapter reports a 300mbps data rate. This got me intrigued, so I tried to take a look at what’s running inside this thing. First look Doing a little online research, you will find out that the firmware on this router had quite a bad history. There’s various blog posts showing that routers running on similar firmware were found to be vulnerable to unauthenticated RCE vulnerabilities, and had hardcoded Telnet backdoor accounts. The first thing I did, of course, is log into the web administration portal - there’s a sticker in the back of the router with the credentials, which seem device specific, which is good… Or so I thought - as it turns out there’s a known ‘superuser’ account for the web panel, which has a default password: AdminGPON / ALC#FGU After fiddling with the web interface, trying to force the WiFi to use 802.11n and 40MHz bandwidth, I’ve noticed no difference. It was time to take a deeper dive. According to someone at lafibre.info forum, Telnet access to this router was possible via the ONTUSER / SUGAR2A041 ‘backdoor’ account, before an update was deployed sometime in June 2018. I’ve tried the web account credentials as well as any backdoor credentials I was able to find, to no avail. The fact that Telnet access locks for 5 minutes every 3 failed attempts didn’t help as well. That’s when I’ve decided to take a look at the configuration backup and restore functionnality. Analysing the backup file As the ‘AdminGPON’ user, you’re able to import and export the router configuration. As the exported config.cfg file wasn’t plain-text, I’ve tried looking for magic values, and binwalk was able to find something right away: $ binwalk config.cfg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------- 20 0x14 Zlib compressed data, default compression Being the lazy guy that I am, I’ve opened the file in a hex editor, stripped out the first 20 bytes, then pasted the hex dump in CyberChef, and a huge xml file showed up. Bingo! Exploring the xml a bit, I was able to spot the Telnet credentials (or so I thought): &amp;lt;TelnetEnable rw=&quot;RW&quot; t=&quot;boolean&quot; v=&quot;True&quot;&amp;gt;&amp;lt;/TelnetEnable&amp;gt; &amp;lt;TelnetUserName ml=&quot;256&quot; rw=&quot;RW&quot; t=&quot;string&quot; v=&quot;admin&quot;&amp;gt;&amp;lt;/TelnetUserName&amp;gt; &amp;lt;TelnetPassword ml=&quot;256&quot; rw=&quot;RW&quot; t=&quot;string&quot; v=&quot;OYdLWUVDdKQTPaCIeTqniA==&quot; ealgo=&quot;ab&quot;&amp;gt;&amp;lt;/TelnetPassword&amp;gt; Alrighty, now how do I crack/decrypt this admin password? Since this was 128-bit base64 encoded data, I tried MD5’ing known passwords, then I tried every other known hashing algorithm, but none of them gave me anything - so it has to be either salted or encryption. Exploring a little further, I’ve found another Telnet credential thingy: &amp;lt;TelnetSshAccount. n=&quot;TelnetSshAccount&quot; t=&quot;staticObject&quot;&amp;gt; &amp;lt;Enable rw=&quot;RW&quot; t=&quot;boolean&quot; v=&quot;False&quot;&amp;gt;&amp;lt;/Enable&amp;gt; &amp;lt;UserName ml=&quot;64&quot; rw=&quot;RW&quot; t=&quot;string&quot; v=&quot;&quot;&amp;gt;&amp;lt;/UserName&amp;gt; &amp;lt;Password ml=&quot;64&quot; rw=&quot;RW&quot; t=&quot;string&quot; v=&quot;&quot; ealgo=&quot;ab&quot;&amp;gt;&amp;lt;/Password&amp;gt; &amp;lt;/TelnetSshAccount.&amp;gt; But it’s unused… Damn. Now that modifying the configuration file seemed more necessary, I tried to take a second look at the exported config.cfg. Modifying the backup file I kept exporting backup files while changing the router settings to regenerate different files for me to look at. After a few comparisons with the not so naked eye (I wear glasses), I was able to tell that a single 32-bit value in the header was always changing radically, so this must be a checksum of sorts. Now before guessing what’s being checksumed and how, I first need to know where the zlib data ends and if there’s something else after it. So I tried recreating the compressed chunk, which was pretty trivial, again thanks to CyberChef. It turns out there’s about 300 bytes after it that are unknown, but still, CRC32 on the deflated data gave the exact value at offset 8, which was in big endian. Yay! Now the null bytes made more sense, and it was clear to me that the other values next to the checksum must be positive integers. Soon after, I was able to figure out that the first one (+4) was the length of the deflated data, while the second one (+C) was the size of the xml file. Since in all the config.cfg files that I’ve exported, the rest of the bytes were static, this seemed enough for me to generate my own backup file, and as expected, uploading my crafted config.cfg worked! Here’s a simple python script I’ve made for this purpose, for those interested. Unlocking Telnet and SSH access So I took the password that I’ve set for the the ‘AdminGPON’ web account from: &amp;lt;WebAccount. n=&quot;WebAccount&quot; t=&quot;staticObject&quot;&amp;gt; &amp;lt;Enable rw=&quot;RW&quot; t=&quot;boolean&quot; v=&quot;True&quot;&amp;gt;&amp;lt;/Enable&amp;gt; &amp;lt;Priority max=&quot;10&quot; min=&quot;1&quot; rw=&quot;RW&quot; t=&quot;unsignedInt&quot; v=&quot;1&quot;&amp;gt;&amp;lt;/Priority&amp;gt; &amp;lt;UserName ml=&quot;64&quot; rw=&quot;RW&quot; t=&quot;string&quot; v=&quot;AdminGPON&quot;&amp;gt;&amp;lt;/UserName&amp;gt; &amp;lt;Password ml=&quot;64&quot; rw=&quot;RW&quot; t=&quot;string&quot; v=&quot;[REDACTED]&quot; ealgo=&quot;ab&quot;&amp;gt;&amp;lt;/Password&amp;gt; &amp;lt;PresetPassword ml=&quot;64&quot; rw=&quot;R&quot; t=&quot;string&quot; v=&quot;xEKUBYh1yT50dQFNwAr/5A==&quot; ealgo=&quot;ab&quot;&amp;gt;&amp;lt;/PresetPassword&amp;gt; &amp;lt;/WebAccount.&amp;gt; And used it for TelnetPassword config node, but logging in as admin still didn’t work. Since I can now generate these password hashes (or whatever they are) also, I tried changing my ‘AdminGPON’ password and comparing the resulting value with the TelnetPassword one (OYdLWUVDdKQTPaCIeTqniA==), and after a couple of tries, I’ve realized that the password was simply: admin. Since we all know that admin:admin is the first login combo that I, and everyone else, use, when trying to login on any panel that’s not ours, it seems like they now ignore these credentials. But don’t worry, TelnetSshAccount comes to the rescue: &amp;lt;TelnetSshAccount. n=&quot;TelnetSshAccount&quot; t=&quot;staticObject&quot;&amp;gt; &amp;lt;Enable rw=&quot;RW&quot; t=&quot;boolean&quot; v=&quot;True&quot;&amp;gt;&amp;lt;/Enable&amp;gt; &amp;lt;UserName ml=&quot;64&quot; rw=&quot;RW&quot; t=&quot;string&quot; v=&quot;hexdd&quot;&amp;gt;&amp;lt;/UserName&amp;gt; &amp;lt;Password ml=&quot;64&quot; rw=&quot;RW&quot; t=&quot;string&quot; v=&quot;[REDACTED]&quot; ealgo=&quot;ab&quot;&amp;gt;&amp;lt;/Password&amp;gt; &amp;lt;/TelnetSshAccount.&amp;gt; I’ve set the ‘Enable’ flag to true, chose a username, and copied my password, and lo and behold, after a reboot, we have root! Stay tuned for more. :)</summary></entry><entry><title type="html">1-click RCE with Skype Web Plugin and Qt apps</title><link href="https://0x41.cf/infosec/2019/05/28/skype-web-plugin-ez-rce.html" rel="alternate" type="text/html" title="1-click RCE with Skype Web Plugin and Qt apps" /><published>2019-05-28T00:00:00+00:00</published><updated>2019-05-28T00:00:00+00:00</updated><id>https://0x41.cf/infosec/2019/05/28/skype-web-plugin-ez-rce</id><content type="html" xml:base="https://0x41.cf/infosec/2019/05/28/skype-web-plugin-ez-rce.html">&lt;h3 id=&quot;context&quot;&gt;Context&lt;/h3&gt;

&lt;p&gt;Earlier this year, I’ve heard that you could send links with custom URI schemes through Discord, that can trigger without the user’s confirmation when using desktop clients.&lt;/p&gt;

&lt;p&gt;I’ve been experimenting with URI schemes ever since, I wanted to see how far I can push it in terms of exploitability, and I’ve found that you could do all sort of fun things in windows - stuff like opening the action center or the task switcher, etc. But I have quickly lost interest however, since I’ve realized there was a bunch of filters that Discord has in place, likely due to various reports from researchers, that prevent a lot of the known ‘malicious’ scheme links from triggering (though I still don’t understand Discord’s decision of not simply using a whitelist for schemes instead of adding regex filters ¯\_(ツ)_/¯).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/strong&gt;: Discord has now started &lt;a href=&quot;/assets/media/discord-proto-warn.png&quot; target=&quot;_blank&quot;&gt;warning&lt;/a&gt; people when clicking on protocol links.&lt;/p&gt;

&lt;p&gt;A couple of months later, it hit the headlines that Electronic Arts’ digital distribution platform, Origin, was found to be vulnerable to an RCE through a URI scheme. This was due to an AngularJS template injection, that was met with some bad implementation that exposed Qt’s common desktop services to JavaScript - more on this &lt;a href=&quot;https://zeropwn.github.io/2019-05-13-xss-to-rce/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://zeropwn.github.io/2019-05-22-fun-with-uri-handlers/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;second blog post&lt;/a&gt; from the same researcher emerged, a couple of days later, where he found another ‘flaw’ in Origin that can be leveraged for RCE, but unlike the first one, this one wasn’t exactly new - it was merely Qt’s plugin feature which can be abused with the right conditions to load arbitrary .dll files through SMB shares …&lt;/p&gt;

&lt;p&gt;Following that blog post, I’ve re-enumerated the URL protocols on my machine (using &lt;a href=&quot;https://github.com/ChiChou/LookForSchemes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this&lt;/a&gt;), and went back to fiddling with URI schemes once more, and soon enough, I was able to find an interesting attack vector …&lt;/p&gt;

&lt;h3 id=&quot;qt-plugin-injection&quot;&gt;Qt plugin injection&lt;/h3&gt;

&lt;p&gt;According to Wikipedia, Qt is a free and open-source widget toolkit for creating GUIs and cross-platform applications, and it seems to be used by quite a lot of apps - a simple explorer search for the Qt core module revealed at least 9 64-bit apps currently installed on my machine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/qtcoredll-explorer-search.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Most of the modern Qt apps you will find will support a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-platformpluginpath&lt;/code&gt; commandline option, which specifies a path to start with while loading plugins. What’s interesting here is the fact that SMB shares are also supported, which means one can load plugins remotely.&lt;/p&gt;

&lt;p&gt;So the question here would be, how can we start a Qt app with this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-platformpluginpath&lt;/code&gt; argument so we can have it load our malicious plugin?&lt;/p&gt;

&lt;p&gt;Yes, you guessed that right, URI schemes. In order for us to be able to launch an app with our custom input in the commandline, it has to have a registered custom URI handler so we can launch it via a webpage and have the URI be sent as an argument, here’s what that looks like on the registry:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/fdm-regedit.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.0x41.cf/b/fdm-regedit2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there’s a slight problem with this approach (as explained in the second blog post I’ve mentionned earlier), and that’s the fact that modern browsers tend to apply URL encoding to the URI, before the app gets executed, which reduces our chance of pulling off the argument injection, since in most cases we would need to inject a double-quote to break out of the URI argument.&lt;/p&gt;

&lt;p&gt;This is where the Skype Web Plugin comes to play …&lt;/p&gt;

&lt;h3 id=&quot;skype-web-plugin&quot;&gt;Skype Web Plugin&lt;/h3&gt;

&lt;p&gt;When Skype for Web first launched, you could use Skype for instant messaging and share multimedia files, but not as a VoIP tool. To make voice and video calls in most supported browsers, people had to install a plugin.&lt;/p&gt;

&lt;p&gt;Doing a quick search online revealed the last available version of the plugin was 7.32.6.278, which was released sometime in 2017, but is still obtainable via their official CDN: &lt;a href=&quot;https://swx.cdn.skype.com/plugin/7.32.6.278/SkypeWebPlugin.msi&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://swx.cdn.skype.com/plugin/7.32.6.278/SkypeWebPlugin.msi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Microsoft introduced plugin-free Skype for Web for their supported browsers, they ditched the plugin and dropped support for Internet Explorer. However, the plugin remains available in systems where previously installed, with the only way to get rid of it being a manual uninstall.&lt;/p&gt;

&lt;p&gt;The ‘Skype Web Plugin’ registers a custom URI handler: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swx&lt;/code&gt;, which launches &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SkypeShell.exe&lt;/code&gt;, which is what looks like to be some sort of Internet Explorer shell, which means that it uses IE’s rendering engine (mshtml.dll) to open webpages.&lt;/p&gt;

&lt;p&gt;To my surpise, this thing will open any HTTP URL, all you need to do is replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http(s)&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swx&lt;/code&gt;, and you have a clickable link that forcefully renders your website using mshtml.dll, but here’s the real problem …&lt;/p&gt;

&lt;p&gt;First of all, protected mode is off by default, so this may potentially allow for more attack vectors that I’m currently not aware of, since I’m not familiar with what protected mode exactly even does, but this certainly doesn’t sound good.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/skypeshell-no-protected-mode.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Secondly (which is what’s more relevant to us), I can load any link with a custom URI from within the shell without having the user to confirm or know anything.&lt;/p&gt;

&lt;p&gt;For reference, here’s what trying to exploit a Qt app using plugin injection would prompt for, when running IE (11.116.18362.0) normally:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/ie-scheme-prompt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So not only can we successfully inject arguments regardless of what browser the victim uses, we can also spawn a dosen of apps through URIs simultaneously.&lt;/p&gt;

&lt;h3 id=&quot;the-proof-of-concept&quot;&gt;The Proof of Concept&lt;/h3&gt;

&lt;p&gt;Now that we’ve got a clear idea of the attack vector we will be using, we’ll start on the implementation.&lt;/p&gt;

&lt;p&gt;The first thing we would need to do is find target Qt apps to exploit, which are essentially apps that allow loading plugins (nearly all of them do), and that have a registered URI handler.&lt;/p&gt;

&lt;p&gt;I’ve found 2 of them already installed on my machine:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;//freedownloadmanager.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Free Download Manager&lt;/a&gt; - The 2nd Google result when searching ‘download manager’.&lt;/li&gt;
  &lt;li&gt;And &lt;a href=&quot;//origin.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Origin&lt;/a&gt;, of course.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve tried to find more apps that meet the 2 conditions to verify my claims, and sure enough with little to no effort I was able to find the &lt;a href=&quot;https://github.com/transmission/transmission&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Transmission&lt;/a&gt; torrent client, which I’m also adding to the list.&lt;/p&gt;

&lt;p&gt;Like I said earlier, this is not exactly a new thing, 2 months ago someone wrote &lt;a href=&quot;https://www.zerodayinitiative.com/blog/2019/4/3/loading-up-a-pair-of-qt-bugs-detailing-cve-2019-1636-and-cve-2019-6739&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this article&lt;/a&gt; explaining how Malwarebytes and Cisco Webex Teams (both of which are programs I’ve used before) were found to be vulnerable to this attack, but what’s interesting here, is the stealthiness and reliability that we can accomplish with the help of the Skype Web Plugin …&lt;/p&gt;

&lt;p&gt;So I started by simply spamming an .html file with iframes that have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculator://&lt;/code&gt; as a src attribute:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'calculator://'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'calculator://'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And as expected, I soon started to hear my CPU fan …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.0x41.cf/b/calcspam.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So at the very least this can be used for DoS by spam launching resource heavy apps, so far so good.&lt;/p&gt;

&lt;p&gt;Now on to the code execution…&lt;/p&gt;

&lt;p&gt;I’ve fired up Visual Studio and made a quick DLL that shows a MessageBox on attach with the process file name as a message.&lt;/p&gt;

&lt;p&gt;To make our .dll loadable by Qt, we have to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.qtmetad&lt;/code&gt; section with valid plugin metadata:&lt;/strong&gt;
We make VS generate an empty one that we’ll fill out manually with a hex editor using content from the original plugin.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Find a plugin we can override:&lt;/strong&gt;
There’s this one called the Windows Integration Plugin (qwindows.dll) which all apps seem to require in order to run on Windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make this stealthy, I’ve added an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExitProcess()&lt;/code&gt; right after the DLL is done executing to prevent the target app from showing up, so as of this stage there’s no visible interruption (besides the Skype shell) and the user won’t notice anything.&lt;/p&gt;

&lt;p&gt;Now all that’s left for us to have is an SMB share that will host our malicous plugins.&lt;/p&gt;

&lt;p&gt;Here’s a detailed video of the PoC in action, from crafting the .dll files to the MessageBox on the 3 apps:&lt;/p&gt;

&lt;p style=&quot;position: relative; padding: 30px 0px 57% 0px; height: 0; overflow: hidden;&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/xVZU-2Y0Pzc&quot; width=&quot;100%&quot; height=&quot;100%&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot;display: block; margin: 0px auto; position: absolute; top: 0; left: 0;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h3 id=&quot;dos-bonus&quot;&gt;DoS Bonus&lt;/h3&gt;

&lt;p&gt;I’ve come across this URI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ms-cxh-full://&lt;/code&gt; that seems to be the fullscreen version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ms-cxh://&lt;/code&gt; which is something used in Microsoft account setup, but what’s interesting is that this one can cause a black screen that can’t be dismissed, forcing the user to sign out/reboot.
&lt;a href=&quot;ms-cxh-full://&quot;&gt;⚠️ Try at your own risk ⚠️&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update (10/2020)&lt;/em&gt;&lt;/strong&gt;: Since I’ve noticed a recent surge in the malicious usage of this particular URI scheme, I’ve added simple steps you can follow, in case you need to recover your Windows 10 session, after an unintended click:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Press Ctrl + Shift + Esc to invoke the Task Manager.&lt;/li&gt;
  &lt;li&gt;You can use Alt + Tab to peek at open windows, but make sure to keep the Task Manager window focused, after you do so.&lt;/li&gt;
  &lt;li&gt;If the Task Manager is in &lt;a href=&quot;/assets/media/taskmgr-simple.png&quot; target=&quot;_blank&quot;&gt;‘simple view’&lt;/a&gt;: Hit Tab, then Space - so that it switches to &lt;a href=&quot;/assets/media/taskmgr-expand.png&quot; target=&quot;_blank&quot;&gt;‘expanded view’&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Blindly type the following on your keyboard (including the space): &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user oobe&lt;/code&gt;, in order to highlight the offending process.&lt;/li&gt;
  &lt;li&gt;Hit the Delete keyboard key, to end it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;update-062019&quot;&gt;Update (06/2019)&lt;/h3&gt;

&lt;p&gt;Microsoft released the &lt;a href=&quot;https://support.microsoft.com/en-us/help/4503293/windows-10-update-kb4503293&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;KB4503293&lt;/a&gt; cumulative update for Windows 10 version 1903 on June 11 of 2019, which updated Internet Explorer from .116 to .175, which includes sanitization for URI scheme links to prevent command-line argument injection:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/media/ie-scheme-prompt-new.png&quot; /&gt; Internet Explorer 11.175.18362.0
&lt;/p&gt;

&lt;p&gt;As a result, this attack is no longer feasible on an up-to-date Windows system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/thedroidgeek/0x41.cf/commits/master/_posts/2019-05-28-skype-web-plugin-ez-rce.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;(edited)&lt;/a&gt;&lt;/p&gt;</content><author><name>Sami ALAOUI KENDIL</name></author><category term="InfoSec" /><summary type="html">Context Earlier this year, I’ve heard that you could send links with custom URI schemes through Discord, that can trigger without the user’s confirmation when using desktop clients. I’ve been experimenting with URI schemes ever since, I wanted to see how far I can push it in terms of exploitability, and I’ve found that you could do all sort of fun things in windows - stuff like opening the action center or the task switcher, etc. But I have quickly lost interest however, since I’ve realized there was a bunch of filters that Discord has in place, likely due to various reports from researchers, that prevent a lot of the known ‘malicious’ scheme links from triggering (though I still don’t understand Discord’s decision of not simply using a whitelist for schemes instead of adding regex filters ¯\_(ツ)_/¯). Update: Discord has now started warning people when clicking on protocol links. A couple of months later, it hit the headlines that Electronic Arts’ digital distribution platform, Origin, was found to be vulnerable to an RCE through a URI scheme. This was due to an AngularJS template injection, that was met with some bad implementation that exposed Qt’s common desktop services to JavaScript - more on this here. A second blog post from the same researcher emerged, a couple of days later, where he found another ‘flaw’ in Origin that can be leveraged for RCE, but unlike the first one, this one wasn’t exactly new - it was merely Qt’s plugin feature which can be abused with the right conditions to load arbitrary .dll files through SMB shares … Following that blog post, I’ve re-enumerated the URL protocols on my machine (using this), and went back to fiddling with URI schemes once more, and soon enough, I was able to find an interesting attack vector … Qt plugin injection According to Wikipedia, Qt is a free and open-source widget toolkit for creating GUIs and cross-platform applications, and it seems to be used by quite a lot of apps - a simple explorer search for the Qt core module revealed at least 9 64-bit apps currently installed on my machine: Most of the modern Qt apps you will find will support a -platformpluginpath commandline option, which specifies a path to start with while loading plugins. What’s interesting here is the fact that SMB shares are also supported, which means one can load plugins remotely. So the question here would be, how can we start a Qt app with this -platformpluginpath argument so we can have it load our malicious plugin? Yes, you guessed that right, URI schemes. In order for us to be able to launch an app with our custom input in the commandline, it has to have a registered custom URI handler so we can launch it via a webpage and have the URI be sent as an argument, here’s what that looks like on the registry: However, there’s a slight problem with this approach (as explained in the second blog post I’ve mentionned earlier), and that’s the fact that modern browsers tend to apply URL encoding to the URI, before the app gets executed, which reduces our chance of pulling off the argument injection, since in most cases we would need to inject a double-quote to break out of the URI argument. This is where the Skype Web Plugin comes to play … Skype Web Plugin When Skype for Web first launched, you could use Skype for instant messaging and share multimedia files, but not as a VoIP tool. To make voice and video calls in most supported browsers, people had to install a plugin. Doing a quick search online revealed the last available version of the plugin was 7.32.6.278, which was released sometime in 2017, but is still obtainable via their official CDN: https://swx.cdn.skype.com/plugin/7.32.6.278/SkypeWebPlugin.msi After Microsoft introduced plugin-free Skype for Web for their supported browsers, they ditched the plugin and dropped support for Internet Explorer. However, the plugin remains available in systems where previously installed, with the only way to get rid of it being a manual uninstall. The ‘Skype Web Plugin’ registers a custom URI handler: swx, which launches SkypeShell.exe, which is what looks like to be some sort of Internet Explorer shell, which means that it uses IE’s rendering engine (mshtml.dll) to open webpages. To my surpise, this thing will open any HTTP URL, all you need to do is replace http(s) with swx, and you have a clickable link that forcefully renders your website using mshtml.dll, but here’s the real problem … First of all, protected mode is off by default, so this may potentially allow for more attack vectors that I’m currently not aware of, since I’m not familiar with what protected mode exactly even does, but this certainly doesn’t sound good. Secondly (which is what’s more relevant to us), I can load any link with a custom URI from within the shell without having the user to confirm or know anything. For reference, here’s what trying to exploit a Qt app using plugin injection would prompt for, when running IE (11.116.18362.0) normally: So not only can we successfully inject arguments regardless of what browser the victim uses, we can also spawn a dosen of apps through URIs simultaneously. The Proof of Concept Now that we’ve got a clear idea of the attack vector we will be using, we’ll start on the implementation. The first thing we would need to do is find target Qt apps to exploit, which are essentially apps that allow loading plugins (nearly all of them do), and that have a registered URI handler. I’ve found 2 of them already installed on my machine: Free Download Manager - The 2nd Google result when searching ‘download manager’. And Origin, of course. I’ve tried to find more apps that meet the 2 conditions to verify my claims, and sure enough with little to no effort I was able to find the Transmission torrent client, which I’m also adding to the list. Like I said earlier, this is not exactly a new thing, 2 months ago someone wrote this article explaining how Malwarebytes and Cisco Webex Teams (both of which are programs I’ve used before) were found to be vulnerable to this attack, but what’s interesting here, is the stealthiness and reliability that we can accomplish with the help of the Skype Web Plugin … So I started by simply spamming an .html file with iframes that have calculator:// as a src attribute: &amp;lt;iframe src='calculator://' height=&quot;0&quot; frameborder=&quot;0&quot;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;iframe src='calculator://' height=&quot;0&quot; frameborder=&quot;0&quot;&amp;gt;&amp;lt;/iframe&amp;gt; ... And as expected, I soon started to hear my CPU fan … So at the very least this can be used for DoS by spam launching resource heavy apps, so far so good. Now on to the code execution… I’ve fired up Visual Studio and made a quick DLL that shows a MessageBox on attach with the process file name as a message. To make our .dll loadable by Qt, we have to: Add a .qtmetad section with valid plugin metadata: We make VS generate an empty one that we’ll fill out manually with a hex editor using content from the original plugin. Find a plugin we can override: There’s this one called the Windows Integration Plugin (qwindows.dll) which all apps seem to require in order to run on Windows. To make this stealthy, I’ve added an ExitProcess() right after the DLL is done executing to prevent the target app from showing up, so as of this stage there’s no visible interruption (besides the Skype shell) and the user won’t notice anything. Now all that’s left for us to have is an SMB share that will host our malicous plugins. Here’s a detailed video of the PoC in action, from crafting the .dll files to the MessageBox on the 3 apps: DoS Bonus I’ve come across this URI ms-cxh-full:// that seems to be the fullscreen version of ms-cxh:// which is something used in Microsoft account setup, but what’s interesting is that this one can cause a black screen that can’t be dismissed, forcing the user to sign out/reboot. ⚠️ Try at your own risk ⚠️ Update (10/2020): Since I’ve noticed a recent surge in the malicious usage of this particular URI scheme, I’ve added simple steps you can follow, in case you need to recover your Windows 10 session, after an unintended click: Press Ctrl + Shift + Esc to invoke the Task Manager. You can use Alt + Tab to peek at open windows, but make sure to keep the Task Manager window focused, after you do so. If the Task Manager is in ‘simple view’: Hit Tab, then Space - so that it switches to ‘expanded view’. Blindly type the following on your keyboard (including the space): user oobe, in order to highlight the offending process. Hit the Delete keyboard key, to end it. Update (06/2019) Microsoft released the KB4503293 cumulative update for Windows 10 version 1903 on June 11 of 2019, which updated Internet Explorer from .116 to .175, which includes sanitization for URI scheme links to prevent command-line argument injection: Internet Explorer 11.175.18362.0 As a result, this attack is no longer feasible on an up-to-date Windows system. (edited)</summary></entry></feed>